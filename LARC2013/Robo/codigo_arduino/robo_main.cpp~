#include <Adb.h>
#include "protocolo.h"

// Adb connection.
Connection * connection;

int motorPWMPins[8] = {3, 11, 3, 11, 3, 11, 3, 11};
int motorDirPins[8] = {12, 13, 12, 13, 12, 13, 12, 13};


void setMotor(uint8_t motorMask, uint8_t directionMask, uint8_t velocity)
{
	uint8_t i;

	for(i = 0x01; i != 0x00; i = i<<1)
	{
		if(i & motorMask)
		{
			if(i & directionMask)
				digitalWrite(motorDirPins[i], HIGH);
			else
				digitalWrite(motorDirPins[i], LOW);

			analogWrite(motorPWMPins[i], velocity);
		}
	}
}

// Event handler for the shell connection. 
void adbEventHandler(Connection * connection, adb_eventType event, uint16_t length, uint8_t * data)
{  
	if (event == ADB_CONNECTION_RECEIVE)
	{
		if(length > 1)
		{
			uint8_t msgLength = data[0];
			uint8_t msgType = data[1];

			switch(msgType)
			{
				case MOTOR:
					if(msgLength == 5)
					{
						setMotor(data[2], data[3], data[4]);
					}
				break;

				case ENCODER:
					// que porra eh essa, pq o arduino ta recebendo msg de encoder?
				break;

			}			
		}
	}

}

void setup()
{
	int i;
	for(i=0; i<8; i++)
	{
		pinMode(motorPWMPins[i], OUTPUT);
		pinMode(motorDirPins[i], OUTPUT);
	}

	// Initialise serial port
	Serial.begin(57600);

	// Note start time
	lastTime = millis();


	// Initialise the ADB subsystem.  
	ADB::init();

	// Open an ADB stream to the phone's shell. Auto-reconnect
	connection = ADB::addConnection("tcp:4567", true, adbEventHandler);  
}

void loop()
{
	//uint16_t data = analogRead(A0);
	//connection->write(2, (uint8_t*)&data);
	
	// Poll the ADB subsystem.
	ADB::poll();
}

