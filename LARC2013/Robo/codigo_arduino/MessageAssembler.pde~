
typedef struct byteList{
	uint8_t *info;
	struct byteList *next;
} bytesList;

typedef struct byteSentry{
	byteList *first, *last;
	int size;
}

typedef struct messageAssembler{

	int BUFFER_SIZE = 255;
  
	//falta o connection
  
	uint8_t connectionBuffer[255];
	int bufferEnd;
  
	byteSentry *msgBuffer;
  
	int msgSizeTable[255];
  
} MessageAssembler;

byteSentry *createByteSentry(){
	byteSentry *sentry;
	sentry = (byteSentry*)calloc(1, sizeof(byteSentry));
}

byteList *createByteList(){
	Bytelist *New;
	New->next = NULL;
}

void insert(byteSentry *sentry, uint8_t* info){
	byteList *aux; *new;
	new = createByteList;
	new->info = info;
	aux = sentry->last;
	aux->next = new;
	sentry->last = new;
}

uint8_t *removeElement(byteSentry *sentry, int pos){
	int i;
	uint8_t *elem;
	byteList *list = sentry->first;
	byteList *aux;
	for(i = 0; i < pos; i++){
		aux = list;
		list = list->next;
	}
	if (i == 0){
		elem = list->info;
		sentry->first = list->next;
		free(list);
	} else {
		elem = list->info;
		aux->next = list->next;
		free(list);
	}
	return elem;
}

void initMsgSizeTable(int *msgSizeTable){
	int i;
	for (i = 0; i < 255; i++)
		msgSizeTable[i] = 0;
	msgSizeTable[0x10] = 3;	// MOTOR_FD
	msgSizeTable[0x11] = 3;	// MOTOR_FE
	msgSizeTable[0x12] = 3;	// MOTOR_TD
	msgSizeTable[0x13] = 3;	// MOTOR_TE
}

MessageAssembler *createMessageAssembler(/*Connection connection*/){
	MessageAssembler New;
	//New->connection = connection;
	
	New->msgBuffer = createByteSentry();
	New->bufferEnd = 0;

	initMsgSizeTable(New->msgSizeTable);
	return New;
}

int messagesAvaliable(MessageAssembler *message){
	byteSentry *buffer;
	buffer = message->msgBuffer;
	if (buffer->size > 0)
		return 1;
	return 0;
}

int* getNextMessage(MessageAssembler *message){
	byteSentry *sentry = message->msgBuffer;
	if(sentry->size > 0)
		return removeElement(sentry,0)
	return NULL;
}

void moveMsgToBuffer(MessageAssembler *message, int size){
	uint8_t *newMsg= (uint8_t*)malloc(size*sizeof(uint8_t));
	int i;
	uint8_t *buffer = message->connectionBuffer;
	for(i = 0; i < size; i++)
		newMsg[i] = message->connectionBuffer[i]
	insert(message->msgBuffer, newMsg);
	message->bufferEnd -= size;
	for (i = 0; i < message->bufferEnd; i++)
		buffer[i] = buffer[i+size]
}

void discardBytes(MessageAssembler *message, int numBytes){
	message->bufferEnd -= numBytes;
	for (i = 0; i < message->bufferEnd; i++)
		buffer[i] = buffer[i + numBytes]
}

void processMessages(MessageAssembler *message){
	int limited = 0;
	while ((message->bufferEnd > 0) && !limited){
		int type = message->connectionBuffer[0];
		int size = message->msgSizeTable[type];
		if (size == 0){
			discardBytes(message, 1);
		} else{
			if(bufferEnd > size - 1)
				moveMsgToBuffer(message, size);
			else
				limited = 1;
		}
	}
}

int readMessageNonBlocking(MessageAssembler *message, uint8_t *data, int lenght){
	int i;
	for (i = 0; i < lenght; i++)
		message->connectionBuffer[i+ message->bufferEnd] = data[i];
	message->bufferEnd += lenght;
	return lenght;
}

void listenConnection(MessageAssembler *message, uint8_t *data, int lenght){
	int readSize = readMessageNonBlocking(message, data, lenght);
	processMessages(message);
}

void addData(uint16_t length, uint8_t* data)
{

}

void loop()
{
  
}
