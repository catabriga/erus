#include <Adb.h>
#include <spi_teste.h>
#include "protocolo.h"

// Adb connection.
Connection * connection;

int motorPWMPins[4] = {6, 3, 6, 3};
int motorDirPins[4] = {4, 5, 4, 5};


void setMotor(int motor, uint8_t velocity, uint8_t direction)
{
	//Serial.print("Setting motor\n\r");

	if(direction)
	{
		digitalWrite(motorDirPins[motor], HIGH);
	}
	else
	{
		digitalWrite(motorDirPins[motor], LOW);
	}	

	analogWrite(motorPWMPins[motor], velocity);
}

void adbEventHandler(Connection * connection, adb_eventType event, uint16_t length, uint8_t * data)
{	
	if (event == ADB_CONNECTION_RECEIVE)
	{
		//Serial.print("Message received. Length: ");
		//Serial.print(length);
		//Serial.print("\n\r");

		if(length > 1)
		{
			uint8_t msgType = data[0];

			switch(msgType)
			{
				case MOTOR_FD:
				{
					if(length >= 3)
					{
						setMotor(0, data[1], data[2]);
					}
				}break;

				case MOTOR_FE:
				{
					if(length >= 3)
					{
						setMotor(1, data[1], data[2]);
					}
				}break;

				case MOTOR_TD:
				{
					if(length >= 3)
					{
						setMotor(2, data[1], data[2]);
					}
				}break;

				case MOTOR_TE:
				{
					if(length >= 3)
					{
						setMotor(3, data[1], data[2]);
					}
				}break;							
			}			
		}
	}

}

void setup()
{
	// Initialise serial port
	Serial.begin(57600);

	int i;
	for(i=0; i<8; i++)
	{
		pinMode(motorPWMPins[i], OUTPUT);
		pinMode(motorDirPins[i], OUTPUT);

		analogWrite(motorPWMPins[i], 0);
                digitalWrite(motorDirPins[i], HIGH);  

	}

	// Initialise the ADB subsystem.  
	ADB::init();

	// Open an ADB stream to the phone's shell. Auto-reconnect
	connection = ADB::addConnection("tcp:4567", true, adbEventHandler);

	Serial.print("Erusbot started\n\r");
}

void loop()
{	

	//uint8_t data[2] = {0, 10};
	//connection->write(2, data);
/*
	analogWrite(motorPWMPins[1], 100);
        digitalWrite(motorDirPins[1], LOW);  

        analogWrite(motorPWMPins[0], 100);
        digitalWrite(motorDirPins[0], LOW);  

        delay(1000);

	analogWrite(motorPWMPins[1], 100);
        digitalWrite(motorDirPins[1], HIGH);  

        analogWrite(motorPWMPins[0], 100);
        digitalWrite(motorDirPins[0], HIGH);  

        delay(1000);
*/

	// Poll the ADB subsystem.
	ADB::poll();
}

