#define PWM_LEFT 11
#define PWM_RIGHT 3
#define DIR_LEFT 13
#define DIR_RIGHT 12
#define SETPOS 20
#define KP 1
#define KD 0.5
#define KI 0

int motorPWMPins[2] = {PWM_LEFT, PWM_RIGHT};
int motorDirPins[2] = {DIR_LEFT, DIR_RIGHT};
int motorMAXPWM[2] = {20, 20}; // DO NOT CHANGE!!! YOU MAY DESTROY THE MOTORS!!!
int sensor[5] = {0,0,0,0,0};
int sensorsSum, sensorsAverage, integral, lastProportional;
int rightSpeed, leftSpeed;

void setupMotors(void)
{
        int i;
	for(i=0; i<2; i++)
	{
		pinMode(motorPWMPins[i], OUTPUT);
		pinMode(motorDirPins[i], OUTPUT);

		analogWrite(motorPWMPins[i], 0);
		digitalWrite(motorDirPins[i], HIGH);
	}
}

void setup(void)
{  
	setupMotors();

	// Initialize serial port
	Serial.begin(9600);

	// Waits 1 second at startup
	// delay(1000);
	Serial.print("Erusbot started\n\r");
}

void setMotor(int motor, uint8_t velocity, uint8_t direction)
{
	
	// This protects the motor to the rated volgate. DO NOT CHANGE!!!
	if(velocity > motorMAXPWM[motor])
	{
		velocity = motorMAXPWM[motor];
	}

	if(direction)
	{
		digitalWrite(motorDirPins[motor], HIGH);
	}

	else
	{
		digitalWrite(motorDirPins[motor], LOW);
	}
		
	analogWrite(motorPWMPins[motor], velocity);
}

void readSensors()
{
        sensorsAverage = 0;
        sensorsSum = 0;
        for(int i=0; i<5; i++)
        {
                sensor[i] = 1 - digitalRead(9-i);
                sensorsAverage += sensor[i]*i*10;
                sensorsSum += sensor[i];
        }
        Serial.print("sensor Average: ");
        Serial.println(sensorsAverage);
        Serial.print("sensor SUM: ");
        Serial.println(sensorsSum);
}

int pidCalc()
{
	int pos =  int(sensorsAverage/sensorsSum);
        Serial.print("POS: ");
        Serial.println(pos);
        
	int proportional = pos - SETPOS;

	integral = integral + proportional;

	int derivative = proportional - lastProportional;

	lastProportional = proportional;
	int error = KP*proportional + KD*derivative + KI*integral;

	return error;
}

void calcTurn(int error)
{
	if(error < -motorMAXPWM[1]) error = -motorMAXPWM[1];
	if(error > motorMAXPWM[0]) error = motorMAXPWM[0];
	if(error < 0)
	{
		rightSpeed =  motorMAXPWM[1] + error;
		leftSpeed = motorMAXPWM[1];
	}
	else if(error > 0)
	{
  		rightSpeed =  motorMAXPWM[1];
		leftSpeed = motorMAXPWM[1] - error;
	}
        else
        {
  		rightSpeed = motorMAXPWM[1];
		leftSpeed = motorMAXPWM[1];
	}
          
}

void printSensors()
{
        for(int i=0; i<5; i++)
        {
                Serial.print(sensor[i]);
                if(i!=4)Serial.print(" / ");
        }
        Serial.println("");
}

void loop()
{	
        int error = pidCalc();;
        readSensors();
        printSensors();
        calcTurn(error);
        
        Serial.print("Erro: ");
        Serial.println(error);
        Serial.print("V Direita:");
        Serial.println(rightSpeed);
        Serial.print("V Esquerda:");
        Serial.println(leftSpeed);
        
        setMotor(0, leftSpeed, 1);
        setMotor(1, rightSpeed, 1);
        Serial.println("-----------------------");
        //delay(1000);
}
